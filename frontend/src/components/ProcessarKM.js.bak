import React, { useState } from "react";
import {
  Box,
  Paper,
  Typography,
  Button,
  CircularProgress,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import InfoIcon from "@mui/icons-material/Info";
import CheckCircleOutlineIcon from "@mui/icons-material/CheckCircleOutline";
import UploadFileIcon from "@mui/icons-material/UploadFile";
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import VisibilityIcon from "@mui/icons-material/Visibility";

// URL base para a API
const API_BASE_URL = process.env.REACT_APP_API_URL || "/api";

// Styled Components
const UploadBox = styled(Box)(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  gap: theme.spacing(3),
  padding: theme.spacing(3),
}));

const FileInput = styled("input")({
  display: "none",
});

const UploadButton = styled(Button)(({ theme }) => ({
  width: "100%",
  padding: theme.spacing(2),
  borderStyle: "dashed",
  borderWidth: 2,
  textTransform: "none",
}));

const FileInfo = styled(Box)(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  gap: theme.spacing(1),
  padding: theme.spacing(1),
  backgroundColor: theme.palette.grey[50],
  borderRadius: theme.shape.borderRadius,
}));

function ProcessarKM({ planilhaOrganizada }) {
  const [planilhaKM, setPlanilhaKM] = useState(null);
  const [planilhaKMNome, setPlanilhaKMNome] = useState(null);
  const [resultado, setResultado] = useState(null);
  const [carregando, setCarregando] = useState(false);
  const [erro, setErro] = useState("");
  const [mensagem, setMensagem] = useState("");
  const [previewData, setPreviewData] = useState({
    km: null,
    organizada: null,
    mostrarPrevia: false,
  });

  const handleSelectFile = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      const arquivo = e.target.files[0];
      setErro("");
      setPlanilhaKM(arquivo);
      setPlanilhaKMNome(arquivo.name);
      setPreviewData((prev) => ({ ...prev, mostrarPrevia: false }));
    } else {
      setPlanilhaKM(null);
      setPlanilhaKMNome(null);
    }
  };

  const carregarPrevia = async () => {
    if (!planilhaKM || !planilhaOrganizada) {
      setErro("Selecione a planilha de KM rodados para visualizar a prévia.");
      return;
    }

    // Verifica se planilhaOrganizada é um objeto File válido
    if (!(planilhaOrganizada instanceof File)) {
      setErro(
        "Planilha organizada não é válida. Por favor, reinicie o processo."
      );
      console.error(
        "planilhaOrganizada não é um objeto File:",
        planilhaOrganizada
      );
      return;
    }

    setCarregando(true);
    setErro("");
    setMensagem("Carregando prévia dos dados de KM rodados...");

    const formData = new FormData();
    formData.append("planilha_km", planilhaKM);
    formData.append("planilha_organizada", planilhaOrganizada);

    // Log para debug
    console.log("Enviando para prévia - planilha_km:", planilhaKM.name);
    console.log(
      "Enviando para prévia - planilha_organizada:",
      planilhaOrganizada.name
    );

    try {
      const response = await fetch(`${API_BASE_URL}/previa-km/`, {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();

        if (data.status === "success") {
          setPreviewData({
            ...previewData,
            ...data.previa,
            mostrarPrevia: true,
          });
          setMensagem("Prévia carregada com sucesso!");
        } else {
          setErro(data.message || "Erro ao carregar prévia dos dados de KM.");
        }
      } else {
        try {
          // Tentar ler o erro como texto
          const errorText = await response.text();
          let errorMessage = `Erro ${response.status}: ${response.statusText}`;

          try {
            // Tentar interpretar o texto como JSON
            const errorData = JSON.parse(errorText);
            if (errorData.detail) {
              errorMessage = errorData.detail;
            } else if (errorData.message) {
              errorMessage = errorData.message;
            }
          } catch (jsonError) {
            // Se não for JSON válido, usar o texto como está
            if (errorText) {
              errorMessage = errorText;
            }
          }

          setErro(errorMessage);
        } catch (parseErr) {
          setErro(`Erro ${response.status}: ${response.statusText}`);
        }
      }
    } catch (err) {
      setErro(`Erro ao conectar com o servidor: ${err.message}`);
      console.error("Erro na requisição de prévia:", err);
    } finally {
      setCarregando(false);
    }
  };

  const processarDados = async () => {
    if (!planilhaKM || !planilhaOrganizada) {
      setErro("Selecione a planilha de KM rodados para continuar.");
      return;
    }

    // Verifica se planilhaOrganizada é um objeto File válido
    if (!(planilhaOrganizada instanceof File)) {
      setErro(
        "Planilha organizada não é válida. Por favor, reinicie o processo."
      );
      console.error(
        "planilhaOrganizada não é um objeto File:",
        planilhaOrganizada
      );
      return;
    }

    setCarregando(true);
    setErro("");
    setMensagem("Processando dados...");

    const formData = new FormData();
    formData.append("planilha_km", planilhaKM);
    formData.append("planilha_organizada", planilhaOrganizada);

    // Log para debug
    console.log("Enviando planilha_km:", planilhaKM.name);
    console.log("Enviando planilha_organizada:", planilhaOrganizada.name);

    try {
      // Sempre pular validação de colunas, pois estamos calculando os valores dinamicamente
      const url = `${API_BASE_URL}/processar-km/?skip_validation=true`;

      const response = await fetch(url, {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        // Para arquivos Excel, tratamos como blob para download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const filename =
          response.headers
            .get("Content-Disposition")
            ?.split("filename=")[1]
            ?.replace(/"/g, "") || "planilha_completa.xlsx";

        // Iniciar download automático
        const a = document.createElement("a");
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        a.remove();

        setMensagem(
          "Processamento concluído com sucesso! O download foi iniciado."
        );
        setResultado({
          download_url: url,
          filename: filename,
          registros_processados: "Processamento concluído",
        });
      } else {
        try {
          // Tentar ler o erro como texto
          const errorText = await response.text();
          let errorMessage = `Erro ${response.status}: ${response.statusText}`;

          try {
            // Tentar interpretar o texto como JSON
            const errorData = JSON.parse(errorText);
            if (errorData.detail) {
              errorMessage = errorData.detail;
            }
          } catch (jsonError) {
            // Se não for JSON válido, usar o texto como está
            if (errorText) {
              errorMessage = errorText;
            }
          }

          setErro(errorMessage);
        } catch (parseErr) {
          setErro(`Erro ${response.status}: ${response.statusText}`);
        }
      }
    } catch (err) {
      setErro(`Erro ao conectar com o servidor: ${err.message}`);
      console.error("Erro na requisição:", err);
    } finally {
      setCarregando(false);
      window.URL.revokeObjectURL(resultado?.download_url);
    }
  };

  // Componente para exibir a tabela de prévia
  function PreviewTable({ data, title }) {
    if (!data || !data.primeiras_linhas || data.primeiras_linhas.length === 0) {
      return null;
    }

    return (
      <div style={{ marginTop: "20px", overflowX: "auto" }}>
        <h4 style={{ fontSize: "16px", color: "#333", marginBottom: "8px" }}>
          {title}
        </h4>
        <table
          style={{
            width: "100%",
            borderCollapse: "collapse",
            fontSize: "14px",
          }}
        >
          <thead>
            <tr>
              {data.colunas.map((coluna, index) => (
                <th
                  key={index}
                  style={{
                    padding: "8px",
                    backgroundColor: "#f2f2f2",
                    border: "1px solid #ddd",
                    fontWeight: "600",
                    textAlign: "left",
                  }}
                >
                  {coluna}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {data.primeiras_linhas.map((linha, rowIndex) => (
              <tr key={rowIndex}>
                {data.colunas.map((coluna, colIndex) => (
                  <td
                    key={colIndex}
                    style={{
                      padding: "8px",
                      border: "1px solid #ddd",
                      textAlign:
                        typeof linha[coluna] === "number" ? "right" : "left",
                    }}
                  >
                    {linha[coluna] !== null && linha[coluna] !== undefined
                      ? String(linha[coluna])
                      : ""}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
        <div style={{ marginTop: "10px", fontSize: "14px", color: "#666" }}>
          <p>
            Total de linhas: {data.num_linhas} | Mostrando as primeiras{" "}
            {data.primeiras_linhas.length} linhas
          </p>
        </div>
      </div>
    );
  }

  return (
    <Box sx={{ maxWidth: 1200, margin: "0 auto", padding: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom color="primary" sx={{ 
        display: 'flex', 
        alignItems: 'center', 
        gap: 2,
        backgroundColor: '#2a79b9',
        color: 'white',
        padding: '20px',
        borderRadius: '8px',
        marginBottom: '24px'
      }}>
        <Box component="img" src="/truck-icon.png" alt="" sx={{ width: 40, height: 40 }} />
        Processar Planilha KM Rodados
      </Typography>
      <Typography variant="body1" paragraph>
        Faça upload da planilha com os dados de KM rodados e consumo para
        complementar a análise da planilha organizada.
      </Typography>

      {(erro || mensagem) && (
        <Alert 
          severity={erro ? "error" : "success"} 
          sx={{ mb: 3 }}
          onClose={() => erro ? setErro("") : setMensagem("")}
        >
          {erro || mensagem}
          {erro?.includes("Colunas") && (
            <Box sx={{ mt: 2 }}>
              <Typography variant="body2" gutterBottom>
                <strong>Informação:</strong> O sistema agora foi atualizado para
                calcular automaticamente as métricas necessárias a partir dos
                dados brutos.
              </Typography>
              <Typography variant="body2" gutterBottom>
                <strong>Colunas necessárias na planilha:</strong>
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon>
                    <InfoIcon color="primary" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="NUM_FROTA"
                    secondary="Identificador da frota"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <InfoIcon color="primary" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="KM_ATUAL"
                    secondary="Quilometragem atual no momento do registro"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <InfoIcon color="primary" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="DTA_MOVIMENTO"
                    secondary="Data do registro"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <InfoIcon color="info" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="QTDE_ITEM (opcional)"
                    secondary="Para calcular litros consumidos"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <InfoIcon color="info" fontSize="small" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="DSC_TIPO_DESPESAS (opcional)"
                    secondary="Para identificar abastecimentos"
                  />
                </ListItem>
              </List>
            </Box>
          )}
        </Alert>
      )}

      <Paper elevation={2}>
        <UploadBox>
          <Box>
            <Typography variant="h6" color="primary" gutterBottom>
              Planilha de KM Rodados
            </Typography>
            <label htmlFor="km-upload">
              <FileInput
                id="km-upload"
                type="file"
                accept=".xlsx,.xls"
                onChange={handleSelectFile}
              />
              <UploadButton
                variant="outlined"
                component="span"
                startIcon={<UploadFileIcon />}
              >
                {planilhaKMNome || 'Selecionar arquivo da planilha de KM'}
              </UploadButton>
            </label>
            {planilhaKMNome && (
              <FileInfo>
                <CheckCircleOutlineIcon color="success" fontSize="small" />
                <Typography variant="body2">{planilhaKMNome}</Typography>
              </FileInfo>
            )}
          </Box>

          <Box sx={{ mt: 2 }}>
            <Typography variant="subtitle2" gutterBottom color="text.secondary">
              O sistema calculará automaticamente:
            </Typography>
            <List dense>
              <ListItem>
                <ListItemIcon>
                  <ArrowForwardIcon color="primary" fontSize="small" />
                </ListItemIcon>
                <ListItemText 
                  primary="Km Rodados Mês"
                  secondary="Diferença entre KM máximo e mínimo por frota/mês"
                />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <ArrowForwardIcon color="primary" fontSize="small" />
                </ListItemIcon>
                <ListItemText 
                  primary="Qtd Litros Consumidos"
                  secondary="Soma dos abastecimentos por frota/mês"
                />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <ArrowForwardIcon color="primary" fontSize="small" />
                </ListItemIcon>
                <ListItemText 
                  primary="Custo / Km Rodado"
                  secondary="Total Despesas dividido pelos KM rodados"
                />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <ArrowForwardIcon color="primary" fontSize="small" />
                </ListItemIcon>
                <ListItemText 
                  primary="Média Consumo"
                  secondary="KM rodados dividido pela quantidade de litros"
                />
              </ListItem>
            </List>
          </Box>

          <Box sx={{ mt: 3, bgcolor: "#f5f5f5", p: 2, borderRadius: 1 }}>
            <Typography variant="subtitle2" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <InfoIcon fontSize="small" color="info" />
              Planilha organizada já selecionada:{" "}
              {planilhaOrganizada && planilhaOrganizada instanceof File
                ? planilhaOrganizada.name
                : planilhaOrganizada
                ? "Arquivo inválido (recarregue a página)"
                : "Nenhuma"}
            </Typography>
          </Box>
          </div>
        </div>
        <div className="buttons-container">
          <button
            type="button"
            onClick={carregarPrevia}
            disabled={carregando || !planilhaKM || !planilhaOrganizada}
            className="preview-button"
          >
            Visualizar Prévia
          </button>
          <button
            type="button"
            onClick={processarDados}
            disabled={carregando || !planilhaKM || !planilhaOrganizada}
            className="process-button"
          >
            Processar Planilhas
          </button>
          <button
            type="button"
            onClick={async () => {
              if (!planilhaKM || !planilhaOrganizada) {
                setErro("Selecione ambas as planilhas para testar o upload.");
                return;
              }
              setCarregando(true);
              setErro("");
              setMensagem("Testando upload de arquivos...");

              const formData = new FormData();
              formData.append("planilha_km", planilhaKM);
              formData.append("planilha_organizada", planilhaOrganizada);

              try {
                const response = await fetch(`${API_BASE_URL}/teste-upload/`, {
                  method: "POST",
                  body: formData,
                });

                if (response.ok) {
                  const data = await response.json();
                  setMensagem(
                    `Teste de upload bem-sucedido! Arquivos recebidos: ${
                      data.arquivos_recebidos.planilha_km.filename
                    } (${Math.round(
                      data.arquivos_recebidos.planilha_km.size / 1024
                    )}KB) e ${
                      data.arquivos_recebidos.planilha_organizada.filename
                    } (${Math.round(
                      data.arquivos_recebidos.planilha_organizada.size / 1024
                    )}KB)`
                  );
                } else {
                  const errorText = await response.text();
                  setErro(
                    `Erro no teste: ${response.status} ${response.statusText} - ${errorText}`
                  );
                }
              } catch (err) {
                setErro(`Erro no teste: ${err.message}`);
              } finally {
                setCarregando(false);
              }
            }}
            disabled={carregando || !planilhaKM || !planilhaOrganizada}
            className="test-button"
            style={{ marginLeft: "10px", backgroundColor: "#6c757d" }}
          >
            Testar Upload
          </button>
        </div>
        {carregando && (
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <div className="loading-text">Processando...</div>
          </div>
        )}
        {/* Área de visualização da prévia */}
        {previewData.mostrarPrevia && (
          <div className="preview-container">
            <h3>Prévia dos Dados</h3>

            {/* Prévia da planilha de KM */}
            {previewData.km &&
              typeof previewData.km === "object" &&
              previewData.km.primeiras_linhas && (
                <PreviewTable
                  data={previewData.km}
                  title="Planilha de KM Rodados"
                />
              )}

            {/* Prévia da planilha organizada */}
            {previewData.organizada &&
              typeof previewData.organizada === "object" &&
              previewData.organizada.primeiras_linhas && (
                <PreviewTable
                  data={previewData.organizada}
                  title="Planilha Organizada"
                />
              )}
          </div>
        )}
      </form>

      {/* Resultado do processamento */}
      {resultado && (
        <div className="result-container">
          <h3>Processamento Concluído</h3>
          <p>O arquivo com os dados processados está pronto para download.</p>
          <a href={resultado.download_url} download className="download-button">
            Baixar Planilha Final
          </a>
          <div className="result-info">
            <p>
              <strong>Nome do arquivo:</strong> {resultado.filename}
            </p>
            <p>
              <strong>Registros processados:</strong>{" "}
              {resultado.registros_processados}
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

export default ProcessarKM;
